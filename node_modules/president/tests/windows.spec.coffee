_ = require('lodash')
chai = require('chai')
expect = chai.expect
sinon = require('sinon')
chai.use(require('sinon-chai'))
windosu = require('windosu')
windows = require('../lib/windows')

describe 'Windows:', ->

	describe '.executeWithPrivileges()', ->

		it 'should throw an error if no command', ->
			expect ->
				windows.executeWithPrivileges(null, _.noop)
			.to.throw('Missing command argument')

		it 'should throw an error if command is an empty string', ->
			expect ->
				windows.executeWithPrivileges('', _.noop)
			.to.throw('Invalid command argument: empty string')

		it 'should throw an error if command is not a string', ->
			expect ->
				windows.executeWithPrivileges([ 'command' ], _.noop)
			.to.throw('Invalid command argument: not a string')

		it 'should throw an error if no callback', ->
			expect ->
				windows.executeWithPrivileges('command', null)
			.to.throw('Missing callback argument')

		it 'should throw an error if callback is not a function', ->
			expect ->
				windows.executeWithPrivileges('command', [ _.noop ])
			.to.throw('Invalid callback argument: not a function')

		describe 'given the command outputs an error', ->

			beforeEach ->
				@windosuExecStub = sinon.stub(windosu, 'exec')
				@windosuExecStub.yields(new Error('windosu error'))

			afterEach ->
				@windosuExecStub.restore()

			it 'should return that error', (done) ->
				windows.executeWithPrivileges 'mycommand', (error, stdout, stderr) ->
					expect(error).to.be.an.instanceof(Error)
					expect(error.message).to.equal('windosu error')
					done()

			it 'should return no stdout nor stderr', (done) ->
				windows.executeWithPrivileges 'mycommand', (error, stdout, stderr) ->
					expect(stdout).to.not.exist
					expect(stderr).to.not.exist
					done()

		describe 'given the command outputs an error and output', ->

			beforeEach ->
				@windosuExecStub = sinon.stub(windosu, 'exec')
				@windosuExecStub.yields(new Error('windosu error'), 'output')

			afterEach ->
				@windosuExecStub.restore()

			it 'should return the error', (done) ->
				windows.executeWithPrivileges 'mycommand', (error, stdout, stderr) ->
					expect(error).to.be.an.instanceof(Error)
					expect(error.message).to.equal('windosu error')
					done()

			it 'should return no stdout nor stderr', (done) ->
				windows.executeWithPrivileges 'mycommand', (error, stdout, stderr) ->
					expect(stdout).to.not.exist
					expect(stderr).to.not.exist
					done()

		describe 'given the command outputs data', ->

			beforeEach ->
				@windosuExecStub = sinon.stub(windosu, 'exec')
				@windosuExecStub.yields(null, 'output')

			afterEach ->
				@windosuExecStub.restore()

			it 'should return the output as stdout', (done) ->
				windows.executeWithPrivileges 'mycommand', (error, stdout, stderr) ->
					expect(error).to.not.exist
					expect(stdout).to.equal('output')
					expect(stderr).to.not.exist
					done()
