child_process = require('child_process')
_ = require('lodash')
chai = require('chai')
expect = chai.expect
sinon = require('sinon')
chai.use(require('sinon-chai'))
unix = require('../lib/unix')

describe 'Unix:', ->

	describe '.executeWithPrivileges()', ->

		it 'should throw an error if no command', ->
			expect ->
				unix.executeWithPrivileges(null, _.noop)
			.to.throw('Missing command argument')

		it 'should throw an error if command is an empty string', ->
			expect ->
				unix.executeWithPrivileges('', _.noop)
			.to.throw('Invalid command argument: empty string')

		it 'should throw an error if command is not a string', ->
			expect ->
				unix.executeWithPrivileges([ 'command' ], _.noop)
			.to.throw('Invalid command argument: not a string')

		it 'should throw an error if no callback', ->
			expect ->
				unix.executeWithPrivileges('command', null)
			.to.throw('Missing callback argument')

		it 'should throw an error if callback is not a function', ->
			expect ->
				unix.executeWithPrivileges('command', [ _.noop ])
			.to.throw('Invalid callback argument: not a function')

		describe 'given an arbitrary command', ->

			beforeEach ->
				@childProcessExecStub = sinon.stub(child_process, 'exec')
				@childProcessExecStub.yields(null, 'output', '')

			afterEach ->
				@childProcessExecStub.restore()

			it 'should prefix a simple command with sudo', (done) ->
				unix.executeWithPrivileges 'my command', (error, stdout, stderr) =>
					expect(@childProcessExecStub).to.have.been.calledWith('sudo my command')
					done()

			it 'should prefix a complex command with sudo', (done) ->
				unix.executeWithPrivileges 'npm install president > output.txt', (error, stdout, stderr) =>
					expect(@childProcessExecStub).to.have.been.calledWith('sudo npm install president > output.txt')
					done()

		describe 'given the command returns an error', ->

			beforeEach ->
				@childProcessExecStub = sinon.stub(child_process, 'exec')
				@childProcessExecStub.yields(new Error('command error'), '', '')

			afterEach ->
				@childProcessExecStub.restore()

			it 'should return the error', (done) ->
				unix.executeWithPrivileges 'command', (error, stdout, stderr) ->
					expect(error).to.be.an.instanceof(Error)
					expect(error.message).to.equal('command error')
					done()

			it 'should return null for stdout and stderr', (done) ->
				unix.executeWithPrivileges 'command', (error, stdout, stderr) ->
					expect(stdout).to.not.exist
					expect(stderr).to.not.exist
					done()

		describe 'given the command prints to stdout', ->

			beforeEach ->
				@childProcessExecStub = sinon.stub(child_process, 'exec')
				@childProcessExecStub.yields(null, 'output', '')

			afterEach ->
				@childProcessExecStub.restore()

			it 'should return the stdout output', (done) ->
				unix.executeWithPrivileges 'command', (error, stdout, stderr) ->
					expect(error).to.not.exist
					expect(stdout).to.equal('output')
					done()

		describe 'given the command prints to stderr', ->

			beforeEach ->
				@childProcessExecStub = sinon.stub(child_process, 'exec')
				@childProcessExecStub.yields(null, '', 'stderr')

			afterEach ->
				@childProcessExecStub.restore()

			it 'should return the stderr output', (done) ->
				unix.executeWithPrivileges 'command', (error, stdout, stderr) ->
					expect(error).to.not.exist
					expect(stderr).to.equal('stderr')
					done()
